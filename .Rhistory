library(quantmod)
library(RCurl)
library("rvest")
library("tidyr")
install.packages("tidyr")
library(quantmod)
library(RCurl)
library("rvest")
library("tidyr")
library("dplyr")
install.packages("dplyr")
library(quantmod)
library(RCurl)
library("rvest")
library("tidyr")
library("dplyr")
library(quantmod)
library(RCurl)
library("rvest")
library("tidyr")
library("dplyr")
#funkcja do siagnia danych z stooq.pl
getStooqData <- function(asset_code,rodzaj) {
w <- getURL(paste("https://stooq.pl/q/d/l/?s=",asset_code,"&i=",rodzaj,sep=""),
ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
write(w,file="data_temp.csv")
stooq_data <- read.csv("data_temp.csv")
stooq_data
}
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL)
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
colnames(tab)
?html_table
?read_html
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "CP-1252")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = " UTF-8")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
webpage <- read_html(wikiPL,encoding = " UTF-16")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = " UTF-16")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
colnames(tab)
webpage <- read_html(wikiPL,encoding = "ISO 8859-2")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "ISO 8859-2")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
wikiPL <- "https://pl.wikipedia.org/wiki/Reprezentacja_Polski_w_pi%C5%82ce_no%C5%BCnej"
webpage <- read_html(wikiPL)
table_links <- html_nodes(webpage, '.wikitable')
tables <- html_table(table_links, fill=TRUE)
FIFA_table <- which(sapply(tables, ncol) == 14)
tab <- tables[[FIFA_table]]
head(tab)
data_long <- gather(tab, Nazwa SpĂłĹ‚ki, SkrĂłt)
?spread
spread(data=tab)
df <- tab[[1]]
df
df <- df[-1,]
df
df <- tab[[1]]
df <- df[,-1]
df
df <- tab[[1]]
select(df,  SkrĂłt)
df
select(df,  Nazwa SpĂłĹ‚ki,SkrĂłt )
separate(df,into=c("Nazwa","ticker","branza"))
colnames(tab)
colnames(df)
separate(df,key=colnames(df) )
df
colnames(df)
separate(df,key=colnames(df),value=colnames(df) )
separate(df, value=colnames(df) )
separate(tab, value=colnames(df) )
separate(df, value=colnames(df) )
data_long <- gather(df, colnames(df)  )
data_long
colnames(df)
?gather
separate(df, value=colnames(df) )
separate(df )
before <- data.frame(
attr = c(1, 30 ,4 ,6 ),
type = c('foo_and_bar', 'foo_and_bar_2')
)
before
df
before %>%
separate(type, c("foo", "bar"), "_and_")
separate(df,key=colnames(df),value=" ")
separate(df,key=colnames(df),value=" ")
df %>%separate(df,key=colnames(df),value=" ")
separate(df,key=colnames(df),value=" ")
df
select(df,  SkrĂłt )
tikery<-as.vector(select(df,  SkrĂłt ))
tikery
tikery[1]
spread(df)
select(df,  SkrĂłt )
tikery<-as.matrix(select(df,  SkrĂłt ))
tikery
tikery<-as.vector(as.matrix(select(df,  SkrĂłt )))
tikery
df
nazwy.spolek<-as.vector(as.matrix(select(df,  Nazwa SpĂłĹ‚ki )))
colnames(df)
colnames(df)[1]
tikery<-as.vector(as.matrix(select(df,  colnames(df)[2])))
nazwy.spolek<-as.vector(as.matrix(select(df,  colnames(df)[1] )))
nazwy.spolek
tikery[2]
webpage <- html(wikiPL,encoding = "ISO 8859-2")
tab <- html_table(table_links, fill=TRUE)
tab
webpage <- read_html(wikiPL,encoding = "ISO 8859-2")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "ISO 8859-2")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
colnames(df)[1]
df <- tab[[1]]
tikery<-as.vector(as.matrix(select(df,  colnames(df)[2])))
nazwy.spolek<-as.vector(as.matrix(select(df,  colnames(df)[1] )))
tikery[2]
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "ISO 8859-2")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
webpage <- read_html(wikiPL,encoding = "CP 1250")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "CP 1250")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
colnames(df)[1]
df <- tab[[1]]
tikery<-as.vector(as.matrix(select(df,  colnames(df)[2])))
nazwy.spolek<-as.vector(as.matrix(select(df,  colnames(df)[1] )))
tikery[2]
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "CP-1250")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
?read_html
?repair_encoding
repair_encoding(tab)
head(tab)
guess_encoding(tab)
repair_encoding(tab,from =windows-1250)
repair_encoding(tab,from ="windows-1250")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "windows-1250")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
webpage <- read_html(wikiPL,encoding = "windows-1250")
repair_encoding(tab)
webpage <- read_html(wikiPL,encoding = "CP-1250")
tab <- html_table(table_links, fill=TRUE)
head(tab)
table_links
?html_nodes
head(tab)
repair_encoding(tab)
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "CP-1250")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
repair_encoding(tab)
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "CP-1250")
webpage
tab <- html_table(table_links, fill=TRUE)
head(tab)
repair_encoding(tab)
guess_encoding(tab)
repair_encoding(tab,from="CP-1250")
colnames(df)[1]
repair_encoding(df,from="CP-1250")
repair_encoding(nazwy.spolek,from="CP-1250")
nazwy.spolek[13]
repair_encoding(nazwy.spolek[13],from="CP-1250")
repair_encoding(nazwy.spolek[13],from="ISO-8859-2")
webpage <- read_html(wikiPL,encoding = "ISO-8859-2")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "ISO-8859-2")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "UTF-8")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
?iconv
webpage <- read_html(iconv(wikiPL, to = "UTF-8"),encoding = "CP-1250")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
webpage <- read_html(iconv(wikiPL, to = "CP-1250"),encoding = "CP-1250")
webpage <- read_html(iconv(wikiPL, to = "CP1250"),encoding = "CP1250")
webpage <- read_html(iconv(wikiPL, to = "ISO-8859-2"),encoding = "ISO-8859-2")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
webpage <- read_html(iconv(wikiPL, to = "UTF-8"),encoding = "UTF-8")
table_links <- html_nodes(webpage, '.wikitable')
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
webpage <- read_html(wikiPL,encoding = "CP1250")
webpage <- read_html(wikiPL,encoding = "CP-1250")
wikiPL <- "https://pl.wikipedia.org/wiki/WIG30"
webpage <- read_html(wikiPL,encoding = "CP-1250")
table_links <- html_nodes(webpage, '.wikitable')
tab <- html_table(table_links, fill=TRUE)
head(tab)
colnames(df)[1]
df <- tab[[1]]
tikery<-as.vector(as.matrix(select(df,  colnames(df)[2])))
nazwy.spolek<-as.vector(as.matrix(select(df,  colnames(df)[1] )))
tikery
nazwy.spolek
getStooqData(tikery[1],"m")
tikery[1]
getStooqData(tikery[2],"m")
getStooqData("ALR","m")
tikery[1]
getStooqData(tikery[1],"m")
?apply(, margin, ...)
?assign
i=1
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
assign(zwroty,value=tikery[i])
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
x.xts
library(quantmod)
library(PerformanceAnalytics)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
assign(zwroty,value=tikery[i])
assign("zwroty",value=tikery[i])
ALR
zwroty
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
ALR.zwroty
getwd()
setwd("C:/Users/user/Dropbox/phd/Skrypty do R/Zmienny-parametr-Beta---grupowanie/Dane")
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
write.csv2(paste(tikery[i],".zwroty",sep=""),file=paste(tikery[i],"_zwroty.csv",sep=""))
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
ALR.zwroty
paste(tikery[i],".zwroty",sep="")
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
write.csv2(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""))
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
write.zoo()
?write.zoo
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
write.zoo(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""),sep=",")
write.zoo(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""))
y=read.csv.zoo("ALR_zwroty")
y=read.csv.zoo("ALR_zwroty")
setwd("C:/Users/user/Dropbox/phd/Skrypty do R/Zmienny-parametr-Beta---grupowanie/Dane")
y=read.csv.zoo("ALR_zwroty")
y=read.csv.zoo("ALR_zwroty.csv")
y
write.zoo(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""),sep=',')
y=read.csv.zoo("ALR_zwroty.csv",sep=',')
y
y[1]
plot(y)
plot.xts(y)
str(y)
y=as.xts(y)
plot.xts(y)
for(i in length(tikery)){
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
write.zoo(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""),sep=',')
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
}
i=2
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
write.zoo(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""),sep=',')
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
setwd("C:/Users/user/Dropbox/phd/Skrypty do R/Zmienny-parametr-Beta---grupowanie/Dane")
for(i in 1:length(tikery)){
x=getStooqData(tikery[i],"m")
ceny = x[,5]
daty = as.Date(x[,1])
x.xts =xts(ceny, daty)
zwroty=CalculateReturns(x.xts, method="log")
zwroty= zwroty[-1,]*100
write.zoo(zwroty,file=paste(tikery[i],"_zwroty.csv",sep=""),sep=',')
assign(paste(tikery[i],".zwroty",sep=""),value=zwroty)
}
